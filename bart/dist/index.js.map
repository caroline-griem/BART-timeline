{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsPsych } from \"jspsych\"\nimport HtmlButtonResponsePlugin from \"@jspsych/plugin-html-button-response\";\nimport PreloadPlugin from \"@jspsych/plugin-preload\";\nimport FullscreenPlugin from \"@jspsych/plugin-fullscreen\";\n\n//console.log(\"jsPsych experiment loading...\");\n\n\n   function getBalloonStyle(pump_count: number) {\n     // Use fixed max sizes to prevent overflow and shifts\n     const maxBalloonHeightVh = 50; // max 50% viewport height\n     const baseHeightPx = 100;\n     const growthPerPumpPx = 10; // less aggressive growth to prevent overflow\n     \n     // Calculate height capped at maxBalloonHeightVh of viewport height\n     const maxBalloonHeightPx = window.innerHeight * (maxBalloonHeightVh / 100);\n     const estimatedHeightPx = baseHeightPx + pump_count * growthPerPumpPx;\n     const finalHeightPx = Math.min(estimatedHeightPx, maxBalloonHeightPx);\n     \n     // Scale capped to avoid huge transforms\n     const scale = 1 + pump_count * 0.02; // slower scale growth\n     const cappedScale = Math.min(scale, 1.5);\n\n     return `\n       height: ${finalHeightPx}px;\n       transform: scale(${cappedScale});\n       transform-origin: bottom center;\n       width: auto;\n     `;\n   }\n\n   //generate start instructions\n   function showStartInstructions() {\n   // console.log(\"showStartInstructions called\");\n    let USDollar = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n     });\n\n     let currency_unit_per_pump = .01;\n\n     const stimulus = `\n        <h1>Balloon Analog Risk Task (BART)</h1>\n         <p>In this task, you will inflate a balloon to earn money.</p>\n         <p>Click <strong>Pump</strong> to inflate the balloon and earn <strong>${USDollar.format(.01*currency_unit_per_pump)}</strong> per pump.</p>\n         <p>Click <strong>Collect</strong> to save your money and end the round.</p>\n         <p>If the balloon pops, you lose the money for that round!</p>\n          <p>Click below to start the task.</p>\n       `;\n\n  const instructions = {\n    type: HtmlButtonResponsePlugin,\n    \n     stimulus: () => {\n       return stimulus;\n     },\n    choices: ['Start']\n  }\n  return instructions;\n   }\n\n      //generate end results\n   function showEndResults(jsPsych: JsPsych) {\n\n    let USDollar = new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD'\n      });\n    \n   // console.log(\"showEndResults called\");\n       const data = jsPsych.data.get().filter({ task: 'bart' });\n       const totalPoints = data.filter({ exploded: false, cashed_out: true }).select('pump_count').sum();\n\n     const stimulus = \n     `<p>You earned a total of <strong>${USDollar.format(totalPoints * 0.01)}</strong>!</p>\n      <p>Thanks for participating!</p>`;\n\n  const instructions = {\n    type: HtmlButtonResponsePlugin,\n    \n     stimulus: () => {\n       return stimulus;\n     },\n    choices: ['Finish']\n  }\n  return instructions;\n   }\n\n\n\nfunction createTrialTimeline(jsPsych: JsPsych, max_pumps: number, min_pumps: number, currency_unit_per_pump: number) {\n    \n// const explosion_range = max_pumps - min_pumps;\n//       //const explosion_point = Math.floor(Math.random() * explosion_range) + MIN_PUMPS;\n//     const explosion_point = 10; // fixed explosion point for testing\n//      let pump_count = 0;\n//      let balloon_popped = false;\n//      let cashed_out = false;\n\n\n    let pump_count: number;\n    let balloon_popped: boolean;\n    let cashed_out: boolean;\n    let explosion_point: number;\n\n     let USDollar = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n     });\n\n    \n    const pump_loop = {\n       timeline: [{\n         type: HtmlButtonResponsePlugin,\n         stimulus: () => {\n           const style = getBalloonStyle(pump_count);\n           return `\n             <div class=\"bart-container\">\n               <div class=\"balloon-area\">\n                 <img src=\"images/transparent_balloon.png\" style=\"${style}\" />\n               </div>\n             </div>\n           `;\n         },\n         on_load: () => {\n           // Remove old earnings-text if any\n           const oldEarnings = document.querySelector('.earnings-text');\n           if (oldEarnings) oldEarnings.remove();\n\n           const earningsText = document.createElement('div');\n           earningsText.className = 'earnings-text';\n             earningsText.innerHTML = `Possible earnings this round: <strong>${USDollar.format(pump_count * currency_unit_per_pump * 0.01)}</strong>`;\n\n           const content = document.querySelector('.jspsych-content');\n           if (content) {\n             content.appendChild(earningsText);\n           }\n         },\n         choices: ['Pump', 'Collect'],\n         button_html: (choice, index)=>{\n              if (choice === 'Pump') {\n                 return `<button class=\"jspsych-btn jspsych-bart-pump-button\">${choice}</button>`;\n              } else {\n                 return `<button class=\"jspsych-btn jspsych-bart-collect-button\">${choice}</button>`;\n              }\n         },\n         on_finish: (data: any) => {\n           if (data.response === 0) {\n             pump_count++;\n             if (pump_count >= explosion_point) {\n               balloon_popped = true;\n             }\n           } else if (data.response === 1) {\n             cashed_out = true;\n           }\n         }\n       }],\n       loop_function: () => !balloon_popped && !cashed_out\n     };\n\n               const outcome = {\n       type: HtmlButtonResponsePlugin,\n       stimulus: () => {\n         const style = getBalloonStyle(pump_count);\n         if (balloon_popped) {\n           return `\n<div style=\"text-align: center; max-width: 600px; margin: 0 auto;\">\n                <div class=\"bart-container\">\n               <div class=\"balloon-area\">\n                 <img src=\"images/transparent_popped_balloon.png\" style=\"${style}\" />\n               </div>\n             </div>\n               <div style=\"text-align: center; max-width: 600px;\">\n                 <p><strong>POP!</strong> The balloon exploded. You earned <strong>${USDollar.format(0)}</strong> this round.</p>\n                 <p>Total earnings across all rounds: <strong>${USDollar.format(.01* jsPsych.data.get().filter({ task: 'bart', exploded: false, cashed_out: true }).select('pump_count').sum())}</strong></p>\n               </div>\n             </div>\n           `;\n         } else {\n           const total_points = pump_count + jsPsych.data.get().filter({ task: 'bart', exploded: false, cashed_out: true }).select('pump_count').sum();\n           const total_money = total_points * currency_unit_per_pump * 0.01;\n\n           return `\n             <p>You collected <strong>${USDollar.format(.01*pump_count)}</strong> this round.</p>\n             <p>Total earnings across all rounds: <strong>${USDollar.format(total_money)}</strong></p>\n           `;\n         }\n       },\n       choices: ['Continue'],\n       on_finish: (data: any) => {\n         data.task = 'bart';\n         //data.trial_num = trial + 1;\n         data.pump_count = pump_count;\n         data.exploded = balloon_popped;\n         data.cashed_out = cashed_out;\n       }\n     };\n\n    const singleTrial = {\n        timeline: [pump_loop, outcome],\n        on_timeline_start: () => {\n      pump_count = 0;\n      balloon_popped = false;\n      cashed_out = false;\n      explosion_point = Math.floor(Math.random() * (max_pumps - min_pumps)) + min_pumps;\n    }\n        \n    };\n    return singleTrial;\n}\n\nexport function createTimeline(jsPsych:JsPsych, {\n    max_pumps = 20,\n    min_pumps = 1,\n    currency_unit_per_pump = 1, //eg 1 cent per pump\n    num_trials = 5, // number of trials in the experiment\n\n} : {\n    max_pumps?: number,\n    min_pumps?: number,\n    currency_unit_per_pump?: number, // eg 1 cent per pump\n    num_trials?: number, // number of trials in the experiment\n} = {})\n{ \n    //jsPsych = jsPsych;\n\n    const trial = createTrialTimeline(jsPsych, max_pumps, min_pumps, currency_unit_per_pump);\n    const bart_timeline = {\n        timeline: [trial],\n        repetitions: num_trials,\n    }\n     return bart_timeline;;\n\n};\n\n\n \n\n\nexport const timelineUnits = {}\n\nexport const utils = {\n    showStartInstructions,\n    showEndResults \n}"]}